{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/useController.ts","../../src/useWatch.ts","../../src/useFormState.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFocusFieldName.ts","../../src/logic/isWatched.ts","../../src/logic/mapCurrentIds.ts","../../src/logic/generateId.ts","../../src/logic/mapId.ts","../../src/utils/append.ts","../../src/utils/fillEmptyArray.ts","../../src/utils/insert.ts","../../src/utils/move.ts","../../src/utils/prepend.ts","../../src/utils/remove.ts","../../src/utils/swap.ts","../../src/utils/update.ts","../../src/useFieldArray.ts","../../src/utils/omitKeys.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/utils/isRegex.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","element","type","data","Date","value","isObjectType","isNullOrUndefined","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","isFunction","useController","methods","control","shouldUnregister","isArrayField","isNameInFieldArray","array","_name","_subjects","shouldSubscribeByName","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useWatch","_defaultValues","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","shouldRenderFormState","state","getProxyFormState","useFormState","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","keepDefaultValue","onChange","getEventValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","useFieldArray","mapIds","_getFieldArray","setFields","_actioned","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","isWatched","_executeSchema","then","_updateValid","swap","mapCurrentIds","swapArrayAt","fieldArrayValues","_updateFieldArray","argA","argB","move","moveArrayAt","prependAt","getFocusFieldName","fillEmptyArray","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","cloneObject","Set","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","join","foundError","pop","isSubmitted","reValidateMode","getValidateError","isMessage","validationData","inputValue","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","live","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"mappings":"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","file":"static/js/2.527983fb.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => (value || []).filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import * as React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(\n      name,\n      fieldArrayValues.length - 1,\n      options,\n    );\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds<TFieldValues, TFieldArrayName, TKeyName>(\n      updatedFieldArrayValues,\n      keyName,\n    );\n    const fieldArrayValues = updateValues(_fieldIds.current);\n\n    setFields(_fieldIds.current);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      fieldArrayValues,\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapIds<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >(convertToArrayPayload(value) as Partial<TFieldValues>[], keyName);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      fieldArrayValues,\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return {\n      ...(isBoolean(options.disabled) ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n\n          if (\n            fieldRef === field._f.ref ||\n            (radioOrCheckbox &&\n              compact(field._f.refs).find((option) => option === fieldRef))\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: radioOrCheckbox\n              ? {\n                  ...field._f,\n                  refs: [...compact(field._f.refs).filter(live), fieldRef],\n                  ref: { type: fieldRef.type, name },\n                }\n              : {\n                  ...field._f,\n                  ref: fieldRef,\n                },\n          });\n\n          !options.disabled && updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}