{"version":3,"sources":["pages/Auth/verifycode.js","application/selectors/auth.js"],"names":["VerifyCode","useForm","control","handleSubmit","errors","formState","setError","dispatch","useDispatch","token","useSelector","getToken","history","useHistory","console","log","className","onSubmit","data","post","url","action","response","success","loginSuccess","SetCookie","refresh_token","push","type","message","error","code","name","render","field","onChange","onBlur","value","ref","size","color","outline","placeholder","buttonType","rounded","block","iconOnly","ripple","getIsLogged","state","auth","isLogged","getCategory","categories"],"mappings":"uGAAA,0IAmGeA,UAhFf,WACI,MAAmEC,YAAQ,IAAlEC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,aAA2BC,EAA7C,EAAgCC,UAAaD,OAAUE,EAAvD,EAAuDA,SAGjDC,EAAWC,cACXC,EAAQC,YAAYC,KAGpBC,EAAUC,cA+BhB,OA9BAC,QAAQC,IAAIN,GA+BR,qBAAKO,UAAU,iDAAf,SACA,qBAAKA,UAAU,+FAAf,SACA,uBAAMC,SAAUd,GAvBH,SAACe,GAClBX,EAASY,YAAK,CACVC,IAAI,mBACJX,MAAM,GAAD,OAAKA,GACVS,OACAG,OAAO,SAACC,GAOG,IAAD,MANHA,EAASC,SACRT,QAAQC,IAAI,eAAeO,EAASJ,MAEpCX,EAASiB,YAAa,CAAC,MAAQF,EAASJ,KAAKT,MAAO,KAAOa,EAASJ,KAAKA,QACzEO,YAAU,gBAAiBH,EAASJ,KAAKQ,eACzCd,EAAQe,KAAK,OAEbb,QAAQC,IAAIO,GACZhB,EAAS,OAAQ,CAAEsB,KAAK,SAAUC,QAAO,OAACP,QAAD,IAACA,GAAD,UAACA,EAAUO,eAAX,iBAAC,EAAmBX,YAApB,iBAAC,EAAyBY,aAA1B,aAAC,EAAgCC,eAS1Cf,UAAU,2BAAlD,UACI,oBAAIA,UAAU,mEAAd,yBAEA,qBAAKA,UAAU,cAAf,SACI,cAAC,IAAD,CACId,QAASA,EACT8B,KAAK,OACLC,OAAQ,YAAkD,IAAD,MAA9CC,MAASC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,OAA2B,EAAnBC,MAAmB,EAAZC,IACzC,OACI,cAAC,IAAD,CACAH,SAAUA,EAAUC,OAAQA,EAC7BR,KAAK,OAAQW,KAAK,UAAUC,MAAM,OAClCC,SAAS,EAAMC,YAAY,OAAOZ,MAAK,UAAE1B,EAAO2B,YAAT,aAAE,EAAaF,eAOrE,qBAAKb,UAAU,4CAAf,SACA,cAAC,IAAD,CACIwB,MAAM,YACNG,WAAW,OACXJ,KAAK,UACLK,SAAS,EACTC,OAAO,EACPC,UAAU,EACVC,OAAO,OAPX,6B,gCCjFZ,sGAAO,IAAMC,EAAc,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAClCxC,EAAW,SAAAsC,GAAK,OAAIA,EAAMC,KAAKzC,OAM/B2C,EAAc,SAAAH,GAAK,OAAIA,EAAM/B,KAAKmC","file":"static/js/28.c7103fcc.chunk.js","sourcesContent":["import {useEffect} from 'react';\r\nimport { Link, Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LoadUser} from '../../application/middlewares/auth';\r\nimport {getToken} from '../../application/selectors/auth';\r\nimport Input from \"@material-tailwind/react/Input\";\r\nimport Button from \"@material-tailwind/react/Button\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport { useForm, Controller} from \"react-hook-form\";\r\nimport { post } from '../../application/middlewares';\r\nimport { \r\n    setToken,loginSuccess\r\n} from \"../../application/actions/auth\";\r\nimport { GetCookie, SetCookie, RemoveCookie } from '../../utils/cookie'\r\n\r\n\r\n\r\nfunction VerifyCode(){\r\n    const {  control, handleSubmit, formState: { errors }, setError} = useForm({\r\n        // resolver: yupResolver(schema)\r\n    });\r\n    const dispatch = useDispatch();\r\n    const token = useSelector(getToken);\r\n    // console.log(token)\r\n    // const isLogged = useSelector(getIsLogged);\r\n    const history = useHistory();\r\n    console.log(token);\r\n    // console.log(data);\r\n    // useEffect(() => {\r\n    //     if(isLogged === false){\r\n    //         dispatch(LoadUser({history}));\r\n    //     }\r\n    //     // eslint-disable-next-line\r\n    // }, [dispatch, isLogged]);\r\n\r\n\r\n    const onSubmit = (data) => {\r\n    dispatch(post({\r\n        url:'user/verify-code',\r\n        token: `${token}`,\r\n        data,\r\n        action:(response)=>{\r\n            if(response.success){\r\n                console.log(\"gelen verify\",response.data)\r\n                // dispatch(setToken(response.data.token));\r\n                dispatch(loginSuccess({\"token\":response.data.token, \"data\":response.data.data}));\r\n                SetCookie('refresh_token', response.data.refresh_token);\r\n                history.push('/')\r\n            }else {\r\n                console.log(response);\r\n                setError('code', { type:'manual', message:response?.message?.data?.error?.code});\r\n\r\n            }\r\n        },\r\n    }))\r\n}\r\n    return(\r\n        <div className=\"flex justify-center items-center h-full w-full\">\r\n        <div className=\"flex max-w-sm mx-auto overflow-hidden bg-white rounded-lg shadow-lg dark:bg-gray-800 lg:w-80\">\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"w-full px-6 py-8 md:px-8\">\r\n            <h2 className=\"text-2xl font-semibold text-center text-gray-700 dark:text-white\">Verify Code</h2>\r\n            {/* <p className=\"text-xl text-center text-gray-600 dark:text-gray-200\">Welcome back!</p> */}\r\n            <div className=\"mt-4 w-full\">\r\n                <Controller\r\n                    control={control}\r\n                    name=\"code\"\r\n                    render={({ field: { onChange, onBlur, value, ref } }) => {\r\n                        return (\r\n                            <Input\r\n                            onChange={onChange} onBlur={onBlur} \r\n                           type=\"code\"  size=\"regular\" color=\"blue\"\r\n                           outline={true} placeholder=\"Code\" error={errors.code?.message} />\r\n                    )}}\r\n                />\r\n            </div>\r\n            \r\n           \r\n\r\n            <div className=\"mt-8 w-full flex justify-end items-center\">\r\n            <Button\r\n                color=\"lightBlue\"\r\n                buttonType=\"link\"\r\n                size=\"regular\"\r\n                rounded={false}\r\n                block={false}\r\n                iconOnly={false}\r\n                ripple=\"dark\"\r\n            >\r\n                send\r\n            </Button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default VerifyCode;","export const getIsLogged = state => state.auth.isLogged;\nexport const getToken = state => state.auth.token;\nexport const getIsLoading = state => state.auth.isLoading;\nexport const getUser = state => state.auth.user;\nexport const getAuth = state => state.auth;\nexport const getStaffList = state => state.auth.staff_list\n// data\nexport const getCategory = state => state.data.categories;\nexport const getFilters = state => state.data.filters;"],"sourceRoot":""}