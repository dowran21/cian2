{"version":3,"sources":["icons/LocationIcon.js","../node_modules/react-leaflet/esm/hooks.js","pages/Map.js"],"names":["LocationIcon","props","baseProfile","viewBox","fill","height","width","d","useMap","useLeafletContext","map","MapComponent","setLocation","toCenter","location","mountedRef","useRef","on","e","current","lat","latlng","lng","setView","getZoom","animate","target","getCenter","useEffect","Map","displayMap","useMemo","MapContainer","center","zoom","scrollWheelZoom","style","className","zIndex","TileLayer","url","attribution"],"mappings":"wHAeiBA,IAfjB,SAAsBC,GAClB,OACE,6CACEC,YAAY,OACZC,QAAQ,YACRC,KAAK,eACLC,OAAO,MACPC,MAAM,OACFL,GANN,aAQE,sBAAMM,EAAE,iS,yGCRT,SAASC,IACd,OAAOC,cAAoBC,I,sCCYpB,SAASC,EAAT,GAA0D,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SAC7CJ,EAAMF,IACNO,EAAaC,kBAAO,GAyB1B,OAxBAN,EAAIO,GAAG,SAAS,SAASC,GAAI,IAAD,IACxB,IAAKH,EAAWI,QAAS,OAAO,MAErB,OAARL,QAAQ,IAARA,OAAA,EAAAA,EAAUM,QAAV,UAAkBF,EAAEG,cAApB,aAAkB,EAAUD,OAAe,OAARN,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,QAAV,UAAkBJ,EAAEG,cAApB,aAAkB,EAAUC,OAC9DZ,EAAIa,QAAQL,EAAEG,OAAQX,EAAIc,UAAW,CACjCC,QAASZ,EAASM,UAAW,IAEjCP,EAAYM,EAAEG,YAGtBX,EAAIO,GAAG,WAAW,SAASC,GAAI,IAAD,IAC1B,IAAKH,EAAWI,QAAS,OAAO,MACrB,OAARL,QAAQ,IAARA,OAAA,EAAAA,EAAUM,QAAV,UAAkBF,EAAEQ,OAAOC,mBAA3B,aAAkB,EAAsBP,OAAe,OAARN,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,QAAV,UAAkBJ,EAAEQ,OAAOC,mBAA3B,aAAkB,EAAsBL,MACtFV,EAAYM,EAAEQ,OAAOC,gBAK7BC,qBAAU,WACN,OAAO,WACHb,EAAWI,SAAU,KAE3B,IAEK,KA2CIU,UAzCf,YAA6B,IAAfjB,EAAc,EAAdA,YAEJC,EAAWG,kBAAO,GAGlBc,EAAaC,mBACf,kBACI,eAACC,EAAA,EAAD,CACIC,OAAQ,CAAC,SAAU,UACnBC,KAAM,GAAIC,iBAAiB,EAC3BC,MAAO,CAAC/B,OAAO,KAHnB,UAMQ,cAACL,EAAA,EAAD,CAAcqC,UAAU,gEAAgED,MAAO,CAACE,OAAO,OAIvG,cAACC,EAAA,EAAD,CAEIC,IAAI,8CACJC,YAAY,2EAUhB,cAAC9B,EAAD,CAAcC,YAAaA,EAAaC,SAAUA,SAGlE,IACA,OACI,qBAAKwB,UAAU,WAAf,SACKP","file":"static/js/9.92233e17.chunk.js","sourcesContent":["function LocationIcon(props) {\r\n    return (\r\n      <svg\r\n        baseProfile=\"tiny\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"currentColor\"\r\n        height=\"1em\"\r\n        width=\"1em\"\r\n        {...props}\r\n      >\r\n        <path d=\"M17.657 5.304c-3.124-3.073-8.189-3.073-11.313 0a7.78 7.78 0 000 11.13L12 21.999l5.657-5.565a7.78 7.78 0 000-11.13zM12 13.499c-.668 0-1.295-.26-1.768-.732a2.503 2.503 0 010-3.536c.472-.472 1.1-.732 1.768-.732s1.296.26 1.768.732a2.503 2.503 0 010 3.536c-.472.472-1.1.732-1.768.732z\" />\r\n      </svg>\r\n    );\r\n  }\r\n  \r\n  export default LocationIcon;\r\n  ","import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}","import { MapContainer, useMap, useMapEvent, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { useRef, useState, useEffect, useMemo } from 'react';\r\nimport LocationIcon from '../icons/LocationIcon'\r\n\r\n// export function SetViewOnClick({toCenter, setLocation}) {\r\n\r\n//     const map = useMapEvent('click', (e) => {\r\n//         map.setView(e.latlng, map.getZoom(), {\r\n//             animate: toCenter.current || false,\r\n//         });\r\n//         setLocation(e.latlng);\r\n\r\n//     });\r\n//     return null\r\n//   }\r\n  export function MapComponent({setLocation, toCenter, location}) {\r\n    const map = useMap();\r\n    const mountedRef = useRef(true);\r\n    map.on('click', function(e) {\r\n        if (!mountedRef.current) return null\r\n        \r\n        if(location?.lat !== e.latlng?.lat && location?.lng !== e.latlng?.lng){\r\n            map.setView(e.latlng, map.getZoom(), {\r\n                animate: toCenter.current || false,\r\n            });\r\n            setLocation(e.latlng);\r\n        }\r\n    });\r\n    map.on('moveend', function(e) {\r\n        if (!mountedRef.current) return null\r\n        if(location?.lat !== e.target.getCenter()?.lat && location?.lng !== e.target.getCenter()?.lng){\r\n            setLocation(e.target.getCenter());\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() =>{\r\n        return () => { \r\n            mountedRef.current = false\r\n        }\r\n    },[])\r\n    //useEffect(() => {map.on('click', (e) => console.log(e.latlng));return () => {map?.off('click')}})\r\n    return null\r\n  }\r\nfunction Map({setLocation}) {\r\n    // const [location, setLocation]  = useState({});\r\n    const toCenter = useRef(false);\r\n    // console.log(location,\"----------ui\")\r\n    // console.log(events)\r\n    const displayMap = useMemo(\r\n        () => (\r\n            <MapContainer \r\n                center={[37.92227, 58.37601]} \r\n                zoom={15} scrollWheelZoom={true}\r\n                style={{height:450}}\r\n                >\r\n                    \r\n                    <LocationIcon className=\"absolute text-gray-800 top-1/2 left-1/2 text-5xl -mt-11 -ml-6\" style={{zIndex:100000}}\r\n                    \r\n                    />\r\n\r\n                    <TileLayer\r\n\r\n                        url=\"https://gamysh.com/map/tile/{z}/{x}/{y}.png\"\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    />\r\n                {/* <Marker \r\n                position={[37.92227, 58.37601]}\r\n                >\r\n                <Popup>\r\n                    your home location\r\n                    </Popup>\r\n                </Marker> */}\r\n                    {/* <SetViewOnClick toCenter={toCenter} setLocation={setLocation}/> */}\r\n                    <MapComponent setLocation={setLocation} toCenter={toCenter} />\r\n            </MapContainer>\r\n        ), \r\n    [])\r\n    return (\r\n        <div className=\"relative\">\r\n            {displayMap}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;"],"sourceRoot":""}