{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/cloneObject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isFileInput.ts","../../src/utils/isFunction.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/omitKeys.ts","../../src/utils/Subject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","element","type","data","Date","value","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","get","keys","formStateData","omit","isEmptyObject","find","useController","methods","control","shouldUnregister","_formValues","_defaultValues","setInputStateValue","disabled","nameRef","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","_subjects","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","registerProps","register","rules","updateMounted","field","_fields","_f","mount","controllerSubscription","values","_shouldUnregisterField","_shouldUnregister","isNameInFieldArray","_names","array","_isInAction","unregister","onChange","event","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","refs","cloneObject","getTime","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","keyName","map","Subscription","tearDowns","tearDown","this","push","teardown","Subscriber","observer","subscription","closed","add","Subject","observers","subscriber","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","_fieldss","criteriaMode","shouldUseNativeValidation","mounted","required","min","max","maxLength","minLength","pattern","validate","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","submitCount","isSubmitting","isSubmitSuccessful","_isMounted","_timer","Set","unMount","watch","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnValid","validateForm","shouldRenderBaseOnError","shouldSkipRender","isValidFromResolver","isWatched","previousError","resolver","delayError","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","getValues","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeResolver","context","getResolverOptions","executeResolverValidation","shouldCheckValid","valid","validateField","fieldError","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","parentNodeName","valError","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","_updateValid","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isGlobal","fieldValues","_updateValues","_updateFieldArray","method","output","updatedFieldArrayValuesWithKey","shouldSet","shouldSetFields","updatedFieldArrayValues","omitKeys","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","setValue","isFieldArray","schemaResult","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","_removeFields","live","_updateProps","useForm","_formControl","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","done","_e","f","err","normalCompletion","didErr","step","_e2"],"mappings":"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","file":"static/js/1.4c931c07.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    const controllerSubscription = control._subjects.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n    updateMounted(name, true);\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._isInAction.val\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) =>\n        elm &&\n        registerProps.ref({\n          focus: () => elm.focus && elm.focus(),\n          setCustomValidity: (message: string) =>\n            elm.setCustomValidity(message),\n          reportValidity: () => elm.reportValidity(),\n        }),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext();\n  const { control = methods.control, disabled, name } = props || {};\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  const [formState, updateFormState] = React.useState(control._formState.val);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  nameRef.current = name as InternalFieldName;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, _localProxyFormState.current) &&\n        updateFormState({\n          ...control._formState.val,\n          ...formState,\n        }),\n    });\n\n    disabled && formStateSubscription.unsubscribe();\n\n    return () => formStateSubscription.unsubscribe();\n  }, [disabled, control]);\n\n  return getProxyFormState(\n    formState as FormState<TFieldValues>,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (\n      field._f.refs ? field._f.refs.every((ref) => ref.disabled) : ref.disabled\n    ) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fieldss: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fieldss, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterMissFields,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport omitKeys from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  };\n  let _fields = {};\n  let _formValues = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _isInAction = false;\n  let _isMounted = false;\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnValid = async () => {\n    const isValid = await validateForm(_fields, true);\n    if (isValid !== _formState.isValid) {\n      _formState.isValid = isValid;\n      _subjects.state.next({\n        isValid,\n      });\n    }\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n    isValidFromResolver?: boolean,\n    isWatched?: boolean,\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const isValid = !!(\n      _proxyFormState.isValid &&\n      (formOptions.resolver ? isValidFromResolver : shouldRenderBaseOnValid())\n    );\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (isWatched ||\n        (error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        _formState.isValid !== isValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(_proxyFormState.isValid && formOptions.resolver ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(isWatched ? { name } : updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (!_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        const fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: getValues(),\n            name,\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) &&\n          updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    }\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const val = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n            }\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        val && (await validateForm(val, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async ({\n    type,\n    target,\n    target: { value, name, type: inputType },\n  }) => {\n    let error;\n    let isValid;\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n\n      const isBlurEvent = type === EVENTS.BLUR;\n      const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange } =\n        getValidationModes(formOptions.reValidateMode);\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f, field._f.mount) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name)) ||\n        skipValidation({\n          isBlurEvent,\n          isTouched: !!get(_formState.touchedFields, name),\n          isSubmitted: _formState.isSubmitted,\n          isReValidateOnBlur,\n          isReValidateOnChange,\n          ...validationMode,\n        });\n      const isWatched =\n        !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n      if (!isUndefined(inputValue)) {\n        set(_formValues, name, inputValue);\n      }\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      if (shouldSkipValidation) {\n        !isBlurEvent &&\n          _subjects.watch.next({\n            name,\n            type,\n          });\n        return (\n          shouldRender &&\n          _subjects.state.next(isWatched ? { name } : { ...fieldState, name })\n        );\n      }\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target as Ref) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const valError = get(errors, parentNodeName, {});\n          valError.type && valError.message && (error = valError);\n\n          if (valError || get(_formState.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n      }\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type,\n          values: getValues(),\n        });\n\n      shouldRenderBaseOnError(\n        false,\n        name,\n        error,\n        fieldState,\n        isValid,\n        isWatched,\n      );\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const isValueUndefined = isUndefined(fieldValue);\n      const defaultValue = isValueUndefined\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _isMounted && _proxyFormState.isValid && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async () => {\n    const isValid = formOptions.resolver\n      ? isEmptyObject((await executeResolver()).errors)\n      : await validateForm(_fields, true);\n\n    if (isValid !== _formState.isValid) {\n      _formState.isValid = isValid;\n      _subjects.state.next({\n        isValid,\n      });\n    }\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n      const isFieldArray = _names.array.has(name);\n\n      (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_isMounted\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames)\n      ? result\n      : isObject(result[0])\n      ? { ...result[0] }\n      : Array.isArray(result[0])\n      ? [...result[0]]\n      : result[0];\n  };\n\n  const _updateValues: RegisterMissFields<TFieldValues> = (\n    defaultValues,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(_fields, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          _updateValues(value, fieldName);\n        } else if (!field) {\n          set(_formValues, fieldName, value);\n        }\n      }\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    updatedFieldArrayValuesWithKey = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    const updatedFieldArrayValues = omitKeys(\n      updatedFieldArrayValuesWithKey,\n      keyName,\n    );\n    _isInAction = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    output = method(get(_formValues, name), args.argA, args.argB);\n    shouldSet && set(_formValues, name, output);\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(updatedFieldArrayValues, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_isMounted ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n      } else {\n        await validateForm(_fields);\n        isValid = isEmptyObject(_formState.errors);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    _proxyFormState.isValid && _updateValid();\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ..._formValues,\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName) as Field) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    _updateValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n\n    if (options.value) {\n      set(_formValues, name, options.value);\n    }\n\n    if (\n      !isUndefined(options.disabled) &&\n      field &&\n      field._f &&\n      field._f.ref.disabled !== options.disabled\n    ) {\n      set(_formValues, name, options.disabled ? undefined : field._f.ref.value);\n    }\n\n    _names.mount.add(name);\n    !field && _updateValidAndInputValue(name, undefined, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isUndefined(options.disabled)\n            ? {}\n            : { disabled: options.disabled }),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(isNameInFieldArray(_names.array, name) && _isInAction) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    _formValues = values;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _isMounted = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _updateValues,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _fields,\n      _proxyFormState,\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _isMounted() {\n        return _isMounted;\n      },\n      set _isMounted(value) {\n        _isMounted = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      _isInAction: {\n        get val() {\n          return _isInAction;\n        },\n        set val(value) {\n          _isInAction = value;\n        },\n      },\n      _formState: {\n        get val() {\n          return _formState;\n        },\n        set val(value) {\n          _formState = value;\n        },\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState.val = {\n            ...control._formState.val,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState.val });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._isMounted) {\n      control._isMounted = true;\n      control._proxyFormState.isValid && control._updateValid();\n      !props.shouldUnregister && control._updateValues(control._defaultValues);\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}